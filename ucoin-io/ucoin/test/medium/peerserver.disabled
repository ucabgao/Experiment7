var ucoin    = require('./../..');
var async    = require('async');
var should   = require('should');
var fs       = require('fs');
var unix2dos = require('../../app/lib/unix2dos');
var parsers  = require('../../app/lib/streams/parsers/doc');
var logger   = require('../../app/lib/logger')('[peerserver]');

var pubkeyCatRaw = unix2dos(fs.readFileSync(__dirname + '/../data/lolcat.pub', 'utf8'));
var pubkeySnowRaw = unix2dos(fs.readFileSync(__dirname + '/../data/snow.pub', 'utf8'));
var pubkeyUbot1Raw = unix2dos(fs.readFileSync(__dirname + '/../data/ubot1.pub', 'utf8'));
var privkeyUbot1Raw = unix2dos(fs.readFileSync(__dirname + '/../data/ubot1.priv', 'utf8'));

var pubkeyCat, pubkeySnow, pubkeyUbot1;
var peerServer;

before(function (done) {
  async.parallel({
    cat: function(callback){
      parsers.parsePubkey().asyncWrite(pubkeyCatRaw, function (err, obj) {
        pubkeyCat = obj;
        callback(err);
      });
    },
    snow: function(callback){
      parsers.parsePubkey().asyncWrite(pubkeySnowRaw, function (err, obj) {
        pubkeySnow = obj;
        callback(err);
      });
    },
    ubot1: function(callback){
      parsers.parsePubkey().asyncWrite(pubkeyUbot1Raw, function (err, obj) {
        pubkeyUbot1 = obj;
        callback(err);
      });
    },
    server: function (callback) {
      peerServer = ucoin.createPeerServer({ name: 'hdc2', listenBMA: false, resetData: true }, {
        pgpkey: privkeyUbot1Raw,
        pgppasswd: 'ubot1',
        currency: 'beta_brousouf',
        ipv4: '127.0.0.1',
        port: 8080,
        remoteipv4: '127.0.0.1',
        remoteport: 8080
      });
      peerServer.on('services', callback);
    }
  }, done);
})

describe('A server', function () {

  this.timeout(1000*5);

  beforeEach(function (done) {
    peerServer.reset(done);
  })

  // afterEach(function (done) {
  //   peerServer.disconnect(done);
  // })
  
  it('Peer should emit error on wrong data type', function (done) {
    peerServer.on('error', function (err) {
      should.exist(err);
      done();
    });
    peerServer.write({ some: 'data' });
  });
  
  it('Peer should accept pubkeys', function (done) {
    async.parallel({
      pubkey: until(peerServer, 'pubkey'),
    }, done);
    peerServer.write(pubkeyCat);
  });
  
  it('Peer should accept status', function (done) {
    async.parallel({
      status:  until(peerServer, 'status'),
    }, done);
    peerServer.write(pubkeyCat);
    peerServer.write({
      "version": "1",
      "currency": "beta_brousouf",
      "fingerprint": "C73882B64B7E72237A2F460CE9CAB76D19A8651E",
      "endpoints": [
        "BASIC_MERKLED_API 127.0.0.1 8080"
      ],
      "keyID": "E9CAB76D19A8651E",
      "signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js VERSION\r\nComment: http://openpgpjs.org\r\n\r\nwsBcBAEBCAAQBQJTlsmOCRDpyrdtGahlHgAAGPoIANAv8Q6PtaLuCzD9aDH+\nue9G10QNsXBCOIErj7wocmct3Y9yeYBwyAfth+ia0K/YDgygOY+n1yKid6QD\nlEOaDSENcdONZlYO/zAHDu6vQR/zsAPyztRCp0TSOCxQcQV2xSFkSvUSF8g2\noNI8RETgpLIlbKE8sS3F4v5OcxSa6wkhgngqRL6ZmqYqTPzgsAXlguA/Tq48\nNwRUQZBeP/TnMvnhhaZeww5qgxMNKWAMIjv7RUvMoP+YMMwSpgIKD3QYOhFK\nZLfYnxhiS/1jtJ+GTVdPLr5MNjLnNAc195aBT7OGi2frIsr7Qhz6TdMQnh0b\n39ohs+qaacQFbPS8qyVbhsM=\r\n=0nGP\r\n-----END PGP SIGNATURE-----\r\n",
      "pubkey": { fingerprint: "C73882B64B7E72237A2F460CE9CAB76D19A8651E" }
    });
    peerServer.write({
      "version": "1",
      "currency": "beta_brousouf",
      "status": "UP",
      "keyID": "E9CAB76D19A8651E",
      "pubkey": { fingerprint: "C73882B64B7E72237A2F460CE9CAB76D19A8651E" }
    });
  });
  
  it('Peer should accept peerings', function (done) {
    async.parallel({
      peer: until(peerServer, 'peer'),
    }, done);
    peerServer.write(pubkeyCat);
    peerServer.write({
      "version": "1",
      "currency": "beta_brousouf",
      "fingerprint": "C73882B64B7E72237A2F460CE9CAB76D19A8651E",
      "keyID": "E9CAB76D19A8651E",
      "endpoints": [
        "BASIC_MERKLED_API 127.0.0.1 8090"
      ],
      "signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js VERSION\r\nComment: http://openpgpjs.org\r\n\r\nwsBcBAEBCAAQBQJTmIfQCRDpyrdtGahlHgAAPboIAIILjXEgODUmkq0shKi+\n+BsOnZNSQ6dzmUYtqjsN83VyqsDIDZSKqQz3khXgDqcAVBXQcaL3oSrZOv70\n53E7oCKh+dOnAuOGrmWUUc2T0lkxppiwINQ9o8JqzDp9qpH8fSlFQu0HWuq/\noYar5B64Tp+dRoUY6iP3qqOpKKRLVj3z8vKJFyRXULNbawQPtrWem5OLatP2\nJw16pK04+IuMdA1+6+t/aeiqIoS/KRT2XlqrJe9nV5YXPC7KlXI80kd0sCEy\nuc7h/WIxkOlTfeXLuSRnQD+JMUKagMvoL7DbjvIgRlPhHp1xk1VjWkqBzBof\ntsf7xfAms830g9nsYnkvy30=\r\n=1kYK\r\n-----END PGP SIGNATURE-----\r\n",
      "pubkey": { fingerprint: "C73882B64B7E72237A2F460CE9CAB76D19A8651E" }
    });
  });
})

function until (server, eventName, count) {
  var counted = 0;
  var max = count == undefined ? 1 : count;
  return function (callback) {
    server.on(eventName, function (obj) {
      logger.trace('event = %s', eventName);
      should.exist(obj);
      counted++;
      if (counted == max)
        callback();
    });
  }
}